/*PRACTICAL NO 7*/
/* Shahrukh khan -SCA05*/
/*There are flight paths between cities. If there is a flight between city A and city B then
there is an edge between the cities. The cost of the edge can be the time that flight take
to reach city B from A, or the amount of fuel used for the journey. Represent this as a
graph. The node can be represented by airport name or name of the city. Use adjacency
list representation of the graph or use adjacency matrix representation of the graph.
Check whether the graph is connected or not. Justify the storage representation used.
**/

#include <iostream>
#include <queue>
#include <vector>
#include <iomanip>
using namespace std;

class CityGraph {
private:
    vector<string> cities;
    vector<vector<int>> adjacencyMatrix;
    int numCities;

    void resetVisited(vector<bool>& visited) {
        fill(visited.begin(), visited.end(), false);
    }

public:
    void inputCities() {
        cout << "Enter number of cities: ";
        cin >> numCities;
        cities.resize(numCities);
        
        for (int i = 0; i < numCities; i++) {
            cout << "Enter city #" << i << " (Airport Code): ";
            cin >> cities[i];
        }
    }

    void inputDistances() {
        adjacencyMatrix.resize(numCities, vector<int>(numCities, 0));
        
        for (int i = 0; i < numCities; i++) {
            for (int j = i + 1; j < numCities; j++) {
                cout << "Enter distance between " << cities[i] << " and " << cities[j] << ": ";
                cin >> adjacencyMatrix[i][j];
                adjacencyMatrix[j][i] = adjacencyMatrix[i][j]; // Undirected graph
            }
        }
    }

    void displayCities() {
        cout << "\nCities List:\n";
        for (int i = 0; i < numCities; i++) {
            cout << "City #" << i << ": " << cities[i] << endl;
        }
    }

    void displayAdjacencyMatrix() {
        cout << "\nAdjacency Matrix:\n";
        cout << setw(10) << "";
        for (const auto& city : cities) {
            cout << setw(10) << city;
        }
        cout << endl;

        for (int i = 0; i < numCities; i++) {
            cout << setw(10) << cities[i];
            for (int j = 0; j < numCities; j++) {
                cout << setw(10) << adjacencyMatrix[i][j];
            }
            cout << endl;
        }
    }

    void dfs(int start, vector<bool>& visited) {
        visited[start] = true;
        cout << cities[start] << " ";

        for (int i = 0; i < numCities; i++) {
            if (adjacencyMatrix[start][i] > 0 && !visited[i]) {
                dfs(i, visited);
            }
        }
    }

    void bfs(int start) {
        vector<bool> visited(numCities, false);
        queue<int> q;

        visited[start] = true;
        q.push(start);

        cout << "BFS Traversal: ";
        while (!q.empty()) {
            int current = q.front();
            q.pop();
            cout << cities[current] << " ";

            for (int i = 0; i < numCities; i++) {
                if (adjacencyMatrix[current][i] > 0 && !visited[i]) {
                    visited[i] = true;
                    q.push(i);
                }
            }
        }
        cout << endl;
    }

    void runTraversals() {
        int start;
        cout << "\nEnter starting city index (0-" << numCities-1 << "): ";
        cin >> start;

        if (start < 0 || start >= numCities) {
            cout << "Invalid starting city index!\n";
            return;
        }

        vector<bool> visited(numCities, false);
        cout << "DFS Traversal: ";
        dfs(start, visited);
        cout << endl;

        bfs(start);
    }
};

int main() {
    CityGraph graph;
    
    graph.inputCities();
    graph.displayCities();
    
    graph.inputDistances();
    graph.displayAdjacencyMatrix();
    
    graph.runTraversals();

    return 0;
}